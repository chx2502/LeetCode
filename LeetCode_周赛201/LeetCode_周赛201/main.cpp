//
//  main.cpp
//  LeetCode_周赛201
//
//  Created by chx on 2020/8/9.
//  Copyright © 2020 __Ninja__. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <map>
#include <stack>
#include <cmath>
#include <algorithm>

using namespace std;

class Solution {
public:
    string makeGood(string s) {
        if (s.length() == 0) return s;
        bool flag = false;
        int bias = 'a'-'A';
        string next = "";
        for (int i = 0; i < s.length(); i++) {
            if (i < s.length() && abs(s[i+1] - s[i]) == bias) {
                flag = true;
                i++;
            } else {
                next.push_back(s[i]);
            }
        }
        if (flag) return makeGood(next);
        else return s;
    }
    
    string invert(string s) {
        for (auto &c : s) {
            if (c == '0') c = '1';
            else c = '0';
        }
        reverse(s.begin(), s.end());
        return s;
    }
    
    string generateSn(string pre) {
        return pre + "1" + invert(pre);
    }
    
    char findKthBit(int n, int k) {
        string result = "0";
        for (int i = 1; i < n; i++) {
            result = generateSn(result);
        }
        return result[k-1];
    }
    
    int maxNonOverlapping(vector<int>& nums, int target) {
        int size = (int)nums.size();
        vector<int> sub(nums.begin(), nums.end());
        for (int i = 1; i < size; i++) sub[i] += sub[i-1];
        vector<vector<int>> dp(size, vector<int>(size, 0));
        for (int i = 0; i < size; i++) {
            for(int j = i; j < size; j++) {
                int sum = 0;
                if (i == j) sum = nums[j];
                else if (i > 0)sum = sub[j] - sub[i-1];
                else sum = sub[j];
                if (sum == target) dp[i][j]++;
            }
        }
        for (int i = 0; i < size; i++) {
            for (int j = i; j < size; j++) {
                for (int k = i; k < j; k++) {
                    dp[i][j] = max(dp[i][k]+dp[k+1][j], dp[i][j]);
                }
            }
        }
        return dp[0][size-1];
    }
    
};




int main(int argc, const char * argv[]) {
    Solution s;
    string s1 = "abBAcC";
    string res1 = s.makeGood(s1);
    char res2 = s.findKthBit(4, 11);
    vector<int> nums = {
        9,-1,-8,-2,20,15,-9,1,-9,-1,1,-3,18,-6,29,24,17,-8,24,17,13,-10,18,12,-8,24,-3,-1,5,-8,22,4,22,2,19,29,24,15,29,-2,24,4,23,-4,29,10,2,29,29,9,4,14,12,10,9,5,10,25,-8,14,5,14,-9,11,15,11,-2,20,-5,18,3,-2,0,26,5,6,7,9,28,-1,20,-10,28,29,25,-2,-5,2,2,29,22,-5,21,3,25,25,10,0,-3,-1,-5,8,-2,16,0,13,7,9,11,25,11,10,-6,-3,30,12,1,25,0,3,29,12,10,2,27,28,1,8,10,23,-6,3,30,4,-5,12,-8,-5,15,-1,1,0,28,13,27,-8,-3,27,20,6,14,29,13,-9,-7,23,9,27,-10,19,9,-1,16,-4,-7,2,24,-2,-10,16,14,-7,-8,7,1,-4,22,-8,-2,3,26,-3,-1,27,29,-5,-7,10,20,9,-3,26,18,23,21,29,11,-10,29,15,8,26,24,2,9,12,9,2,16,19,2,-8,9,-7,3,-8,5,2,-9,15,15,30,24,-2,-4,3,-9,-8,5,28,0,22,8,6,30,12,20,19,-10,7,-3,13,2,-8,-9,21,-1,21,-9,23,-4,20,18,9,-1,16,-2,-3,-10,-3,0,26,13,10,8,15,15,15,22,9,18,25,15,10,22,22,0,18,29,15,2,18,18,29,-4,29,29,2,6,6,24,13,6,-7,7,22,4,25,18,3,-6,0,20,6,20,30,-2,1,-5,29,10,-5,19,14,2,21,13,19,11,-4,5,-6,-3,-4,-10,0,0,-1,-4,-6,21,25,16,5,29,20,12,6,15,20,26,17,13,14,-6,-5,18,18,21,28,-3,2,23,28,-2,16,9,2,18,0,30,15,16,0,2,-2,20,12,15,1,8,12,17,11,14,24,-6,26,19,28,3,27,26,-8,6,23,24,26,-6,11,6,18,-7,28,1,13,-2,2,9,5,8,6,9,-3,25,18,22,17,14,8,4,-9,9,15,9,-2,-8,-7,-10,8,-7,16,0,6,9,20,13,26,13,22,2,30,-4,24,-8,28,15,19,10,17,26,25,26,17,15,17,28,19,-6,8,5,19,18,27,23,28,-10,13,-4,7,18,-8,4,4,29,-6,23,22,14,18,3,-9,-1,23,25,22,9,12,13,13,-6,14,-5,4,26,12,24,-8,19,22,7,4,24,10,-5,8,5,16,7,23,11,6,2,-10,4,26,-7,23,16,26,10,-10,-3,-8,15,-9,23,8,10,4,3,16,-6,18,18,-9,11,-9,28,-1,8,25,5,2,20,10,19,17,20,1,13,24,0,-8,25,15,6,27,-10,26,-5,2,17,-8,28,28,7,-6,11,8,12,4,-7,-9,-9,7,23,23,-1,10,13,13,15,13,15,-1,5,30,12,4,-6,26,27,26,-3,12,28,-1,3,0,-1,25,11,25,-10,13,1,3,13,18,-10,-4,16,28,23,-10,19,1,6,-3,-9,11,28,8,9,11,16,5,-3,27,-2,-10,11,-2,2,27,19,12,-10,25,24,29,20,15,3,-3,-2,16,-3,29,-6,22,30,12,23,20,11,18,8,5,21,0,23,25,-5,9,22,25,14,0,21,-7,21,0,12,7,7,10,4,4,4,18,25,15,0,-2,-7,10,28,13,9,8,29,25,1,6,15,10,14,4,-8,17,25,7,-2,-1,29,0,-2,-6,11,3,29,5,-6,2,19,21,29,15,18,9,-4,22
    };
    int res3 = s.maxNonOverlapping(nums, 20);
    return 0;
}
